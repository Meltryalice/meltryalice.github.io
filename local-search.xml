<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于换零钱问题</title>
    <link href="/2025/10/19/%E5%85%B3%E4%BA%8E%E6%8D%A2%E9%9B%B6%E9%92%B1%E9%97%AE%E9%A2%98/"/>
    <url>/2025/10/19/%E5%85%B3%E4%BA%8E%E6%8D%A2%E9%9B%B6%E9%92%B1%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="换零钱问题"><a href="#换零钱问题" class="headerlink" title="换零钱问题"></a>换零钱问题</h1><blockquote><p>我们有一些50美分，25美分，10美分，5美分和一美分的硬币，要把1美元换成零钱，一共有多少种不同的方式？</p></blockquote><h2 id="关于递归的解决思路"><a href="#关于递归的解决思路" class="headerlink" title="关于递归的解决思路"></a>关于递归的解决思路</h2><p>对于这个问题，我们可以用递归的方式解决。<br>把总数为a的现金换成n种硬币的不同方式的数目等于：<strong>现金a换成除去第一种硬币之外的所有其他硬币的不同方式数目，加上现金a - d换成所有种类硬币的不同方式数目，其中d是第一种硬币的币值</strong></p><p>这乍一看很抽象，实际上很好理解。<br>我们可以把硬币兑换的结果进行分类，以最初的换零钱问题为例：把一美元进行兑换，实际上可以分为两种结果。</p><ol><li>使用了50美分硬币进行兑换的</li><li>没有使用50美分进行兑换的<br>即，第一组都用了50美分的硬币，第二组都没有用50美分的硬币</li></ol><p>这是可以不断递归的，我们可以在都用了50美分硬币的基础上继续分类，使用了50美分的分类方法中，可以有都使用了25美分的一组，可以有都没有使用25美分的一组。</p><p>因此，我们可以得到这样的算法：<br>. 如果a就是0，应该算作有1种换零钱的方式。<br>. 如果a小于0，应该算作有0种换零钱的方式。<br>. 如果n是0，应该算作0种换零钱的方式。</p><p>如果这种说法不太好理解，接下来可以通过代码对这段话进行理解。</p><h2 id="关于构造函数抽象"><a href="#关于构造函数抽象" class="headerlink" title="关于构造函数抽象"></a>关于构造函数抽象</h2><p>我们将通过构造函数的方式解决这个问题。<br>构造函数有以下优点：</p><ol><li>可以将程序拆分成各个组成部分。这有利于维护程序和扩展程序。</li><li>有利于通过构造函数解决一般性问题，而不是单一问题。</li></ol><p>关于第二点，我们可以将最开始的换零钱问题进行延伸，我们可以提出这样的问题：</p><blockquote><p>给了任意数量的美金，我们能写出一个程序，计算出所有换零钱方式的数目吗？</p></blockquote><p>同样，我们将通过代码来理解这一点。</p><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>因此我们可以得到初步的程序如下：<br>（函数 first_denomination 可以用硬币的种类数作为输入，返回第一种硬币的币值。在这里我们认为硬币按从小到大的顺序排列，实际上，无论硬币按什么顺序排列，都对我们递归的结果没有任何影响）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">count_change</span>(<span class="hljs-params">amount</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">cc</span>(amount,<span class="hljs-number">5</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cc</span>(<span class="hljs-params">amount, kinds_of_coins</span>) &#123;<br>    <span class="hljs-keyword">return</span> amount === <span class="hljs-number">0</span><br>           ? <span class="hljs-number">1</span><br>           : amount &lt; <span class="hljs-number">0</span> || kinds_of_coins === <span class="hljs-number">0</span><br>           ? <span class="hljs-number">0</span><br>           : <span class="hljs-title function_">cc</span>(amount,kinds_of_coins - <span class="hljs-number">1</span>)<br>             +<br>             <span class="hljs-title function_">cc</span>(amount - <span class="hljs-title function_">first_denomination</span>(kinds_of_coins),<br>kinds_of_coins);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">first_denomination</span>(<span class="hljs-params">kinds_of_coins</span>) &#123;<br>    <span class="hljs-keyword">return</span> kinds_of_coins === <span class="hljs-number">1</span> ? <span class="hljs-number">1</span><br>         : kinds_of_coins === <span class="hljs-number">2</span> ? <span class="hljs-number">5</span><br>         : kinds_of_coins === <span class="hljs-number">3</span> ? <span class="hljs-number">10</span><br>         : kinds_of_coins === <span class="hljs-number">4</span> ? <span class="hljs-number">25</span><br>         : kinds_of_coins === <span class="hljs-number">5</span> ? <span class="hljs-number">50</span><br>         : <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>1美元换硬币的方法数目如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title function_">count_change</span>(<span class="hljs-number">100</span>);<br><span class="hljs-number">292</span><br></code></pre></td></tr></table></figure><p>可以看到，通过构造函数抽象的方式，我们可以做到将这个问题拆分成几个部分。</p><ol><li>不同美元换硬币的方式</li><li>统计硬币的种类数</li><li>返回硬币的币值</li></ol><p>同时，我们尽可能的将这个问题一般化了，我们当然可以使用<code>count_change(200)</code>来计算2美元换硬bf币的不同方法的数目。</p><h2 id="关于递归与迭代"><a href="#关于递归与迭代" class="headerlink" title="关于递归与迭代"></a>关于递归与迭代</h2><p>当然，仅仅如此，这段程序也并不完善。因为它产生的是树形递归的计算过程。<br>对于比较树形递归和线性迭代，我们可以以斐波那契数列为例。</p><h3 id="以斐波那契数列为例"><a href="#以斐波那契数列为例" class="headerlink" title="以斐波那契数列为例"></a>以斐波那契数列为例</h3><p>在斐波那契数列中，这一序列的每个数都是前两个数之和。<br><strong>0，1，1，2，3，5，8，12，21</strong></p><h4 id="斐波那契数列的树形递归"><a href="#斐波那契数列的树形递归" class="headerlink" title="斐波那契数列的树形递归"></a>斐波那契数列的树形递归</h4><p>显然，将这个定义写成递归函数并不难：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n === <span class="hljs-number">0</span><br>           ? <span class="hljs-number">0</span><br>           : n === <span class="hljs-number">1</span><br>           ? <span class="hljs-number">1</span><br>           : <span class="hljs-title function_">fib</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title function_">fib</span> (n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>假设我们现在要计算<code>fib(5)</code>,我们需要计算<code>fib(4)</code>和<code>fib(3)</code>。但是，为了计算<code>fib(4)</code>,我们又需要计算<code>fib(3)</code>和<code>fib(2)</code>。<br>这一计算过程就像一棵树，也就是所谓树形递归。如图：<br><img src="/img/20251019.svg" alt="树形递归"><br>通过上图，我们可以发现，为了计算<code>fib(5)</code>，我们计算了两次<code>fib(3)</code>，这几乎占到了所有工作的一半。而我们计算<code>fib(n)</code>时，n越大，则进行的重复计算越多。</p><h4 id="斐波那契数列的线性迭代"><a href="#斐波那契数列的线性迭代" class="headerlink" title="斐波那契数列的线性迭代"></a>斐波那契数列的线性迭代</h4><p>再让我们看另一段程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fib_iter</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fib_iter</span>(<span class="hljs-params">a, b, count</span>) &#123;<br>    <span class="hljs-keyword">return</span> count === <span class="hljs-number">0</span><br>           ? b<br>   : <span class="hljs-title function_">fib_iter</span>(a + b, a, count - <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这就是所谓的线性迭代。我们有下面的迭代过程：<br>a &#x3D;&gt; a + b<br>b &#x3D;&gt; a<br>在这个函数中，我们同样使用了递归的方式，但不同的是，其计算过程是线性的。这很好理解，因为当我们可以发现，计算<code>fib(5)</code>时，不再需要重复计算<code>fib(3)</code>了。</p><p>因此，线性迭代的效率要更高。</p><h3 id="关于换零钱问题的线性迭代"><a href="#关于换零钱问题的线性迭代" class="headerlink" title="关于换零钱问题的线性迭代"></a>关于换零钱问题的线性迭代</h3><p>我们已经有了换零钱问题的树形递归计算法，那么，不妨思考下，我们可以有换零钱问题的迭代方法吗？</p><p>与斐波那契数列不同的是，我们无法仅仅使用两个变量完成迭代。换零钱问题的线性迭代更具有难度。让我们看这段程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">count_change</span>(<span class="hljs-params">total_amount</span>) &#123;<br>    <span class="hljs-keyword">const</span> denominations = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>]; <br>    <span class="hljs-keyword">const</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(total_amount + <span class="hljs-number">1</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> coin_value <span class="hljs-keyword">of</span> denominations) &#123;。<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> amount = coin_value; amount &lt;= total_amount; amount++) &#123;<br>            dp[amount] += dp[amount - coin_value];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[total_amount];<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们使用了名为dp的数据结构记录了不同总额换零钱的全部方法。<br>我们创建了dp变量，其中dp共有<code>total_amount + 1</code>项，且每一项为0，表示最开始无论何种总额，都只有0种兑换方式。因为我们要考虑0的存在，<code>dp[0] = 1</code>：凑出金额0只有1种方式（即不使用任何硬币）。<br>对于每一种硬币面额，我们遍历所有可能的金额<code>amount</code>，其中，最为关键的是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">dp[amount] += dp[amount - coin_value];<br></code></pre></td></tr></table></figure><p><strong>理解</strong>：当我们在考虑使用硬币<code>coin_value</code>时，凑出金额<code>amount</code>的新方法数量，等于不使用硬币<code>coin_value</code>时凑出<code>amount</code>的原有方法数<code>dp[amount]</code>加上使用至少一个硬币<code>coin_value</code>的方法数<code>dp[amount - coin_value]</code>。</p><p>循环结束后,<code>dp[total_amount]</code>即为最终答案。</p><p>这种计算结果效率无疑高了很多。</p><p>这样的算法思路被称为动态规划。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>比起树形递归，线性迭代的效率要高得多</li><li>我们可以用动态规划的思考方式，写出线性迭代的程序</li></ol><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>其实除了动态规划外，还存在别的方式实现线性迭代的计算过程，但这里不作赘述。（因为效率比动态规划要低，不过仍然是值得了解的方式）</p><p>参考：</p><ol><li><a href="https://sourceacademy.org/sicpjs/1.2.2">1.2.2  Tree Recursion</a></li><li><a href="https://rosettacode.org/wiki/Count_the_coins">Count the coins</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>prog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
